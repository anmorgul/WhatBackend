pipeline {
    environment {
		telegramToken = credentials('telegramToken')
		telegram_bot_name = credentials('telegram_bot_name')
		telegram_channel_id = credentials('telegram_channel_id')
		CDD_APPLICATION_VERSION_NAME = "${env.GIT_BRANCH}"
		template_msg = "*Build* $JOB_NAME"
    }
	agent { label 'main'}
// { label 'nodejs'}
	stages {
		stage("ls") {
			steps {
                sh "ls"
                withCredentials([
					string(credentialsId: 'telegramToken', variable: 'telegramToken'),
					string(credentialsId: 'telegram_bot_name', variable: 'telegram_bot_name'),
					string(credentialsId: 'telegram_channel_id', variable: 'telegram_channel_id')
					]) {
          			sh ('curl -s -X POST https://api.telegram.org/bot$telegramToken/sendMessage \
					  	-d chat_id=$telegram_channel_id \
						-d parse_mode=markdown \
						-d text="*Build:*\n${JOB_NAME}\n*Process*:[JOB_DISPLAY](${JOB_DISPLAY_URL})\n${JOB_DISPLAY_URL}\n*Git commit:*\n${GIT_COMMIT}"')
                    }
                sh "cp ./jenkins/Dockerfile.api ./Dockerfile" 
            }
        }
		stage("create .env") {
			steps {
                sh "echo 'ConnectionStrings__DefaultConnection=server=mysqlinstance.cgdizvert0bq.eu-central-1.rds.amazonaws.com;port=3306;UserId=DB_USERNAME;Password=DB_PASSWORD;database=soft;Allow User Variables=true' > ./CharlieBackend.Api/.env"
                sh "echo 'ConnectionStrings__RabbitMQ=host=kangaroo.rmq.cloudamqp.com;virtualHost=cfhrvrrt;username=cfhrvrrt;password=yYvcHUcFxTsHGm51j4GtpA3mFguNv065' >> ./CharlieBackend.Api/.env"
                sh "echo 'ConnectionStrings__AzureBlobsAccessKey=DefaultEndpointsProtocol=https;AccountName=csb10032000fbf86473;AccountKey=3Naz0PXXBe0Lie7HV51jdZsSFCqThDMsqGWdENueI/d2OoV14j6o9Hh0lY1TvAtM8g0VIuPQLDDmEruu951NZA==;EndpointSuffix=core.windows.net' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Url=https://963c-188-163-45-170.ngrok.io' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Key=1945675656:AAF5rVHswcwa8-xIZLS4DUlgFL2RW8mhrGM' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Name=whatnotification_bot' >> ./CharlieBackend.Api/.env"
                sh "echo 'AuthOptions__KEY=mysupersecret_secretkey!123' >> ./CharlieBackend.Api/.env"
                sh "echo 'CredentialsSendersSettings__email=WhatITAcademy@gmail.com' >> ./CharlieBackend.Api/.env"
                sh "echo 'CredentialsSendersSettings__password=sseta2551fgya1235' >> ./CharlieBackend.Api/.env"
            }
        }
        stage("docker build and push to ecr") {
			steps {
                script {
                    sh 'docker image prune -f'
                    TAG = sh (
                        script: 'git log -1 --pretty=%h',
                        returnStdout: true
                    ).trim()
                    docker.withRegistry(
                        'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
                        'ecr:eu-central-1:aws_creds') {
                            def myImage = docker.build('what-backend-release-ecr')
                        myImage.push(TAG)
                    }
                }
            }
        }
        stage('testdockrecs') {
            agent { label 'ECS_agent_template1'}
                steps {
                    echo 'Running build'
                }
        }
        
        stage('docker launch') {
            agent {
                ecs {
                    cloud 'what-backend-vpc'
                    // 'label-of-my-preconfigured-template':
                    // inheritFrom 'what2'
                    launchType 'FARGATE'
                    cpu 256
                    memory 512
                    // sudo yum install nodejs npm --enablerepo=epel
                    // label 'what-backend-vpc'
                    image '934086672967.dkr.ecr.eu-central-1.amazonaws.com/what-backend-release-ecr'
                    // image '$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/jenkins/java8:2019.7.29-1'
                    // logDriver 'fluentd'
                    // logDriverOptions([[name: 'foo', value:'bar'], [name: 'bar', value: 'foo']])
                    portMappings([[containerPort: 80, hostPort: 80, protocol: 'tcp'], [containerPort: 5000, hostPort: 5000, protocol: 'tcp'], [containerPort: 5001, hostPort: 5001, protocol: 'tcp']])
                }
            }
            steps {
                sh 'echo hello'
            }
        }
    }
}
