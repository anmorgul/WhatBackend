pipeline {
    // parameters {
    //     string(name: 'rdburl', defaultValue: '')
    //     string(name: 'rdbport', defaultValue: '')
    // }
    environment {
		telegramToken = credentials('telegramToken')
		telegram_bot_name = credentials('telegram_bot_name')
		telegram_channel_id = credentials('telegram_channel_id')
		CDD_APPLICATION_VERSION_NAME = "${env.GIT_BRANCH}"
		template_msg = "*Build* $JOB_NAME"
        AWS_ECR_REGION = "eu-central-1"
        AWS_ECS_TASK_DEFINITION = "what-backend-task"
        AWS_ECS_PANEL_TASK_DEFINITION = "what-backend-panel-task"
        AWS_ECS_EXECUTION_ROL = "what-backend-execution-task-role" 
        AWS_ECS_COMPATIBILITY = "FARGATE"
        AWS_ECS_NETWORK_MODE = "awsvpc"
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_TASK_DEFINITION_PATH = './jenkins/ecs/container-definition-update-image.json'
        AWS_ECS_PANEL_TASK_DEFINITION_PATH = './jenkins/ecs/container-definition-update-image-panel.json'
        AWS_ECS_CLUSTER = 'what-backend-release-cluster'
        AWS_ECS_SERVICE = 'what-backend-release-ecs-service'
        AWS_ECS_PANEL_SERVICE = 'what-backend-release-ecs-panel-service'
        AWS_ECR_URL = '934086672967.dkr.ecr.eu-central-1.amazonaws.com/what-backend-release-ecr'
        DB_USERNAME = 'DB_USERNAME'
        DB_PASSWORD = 'DB_PASSWORD'
        DATABASE = 'soft'
        APIURL = "http://3.122.116.183:80"
        rdburl = ""
        rdbport = ""
    }
	agent { label 'nodejs'}
// { label 'nodejs'}
	stages {

		stage("ls") {
			steps {
                withCredentials([
					string(credentialsId: 'telegramToken', variable: 'telegramToken'),
					string(credentialsId: 'telegram_bot_name', variable: 'telegram_bot_name'),
					string(credentialsId: 'telegram_channel_id', variable: 'telegram_channel_id')
					]) {
          			sh ('curl -s -X POST https://api.telegram.org/bot$telegramToken/sendMessage \
					  	-d chat_id=$telegram_channel_id \
						-d parse_mode=markdown \
						-d text="*Build:*\n${JOB_NAME}\n*Process*:[JOB_DISPLAY](${JOB_DISPLAY_URL})\n${JOB_DISPLAY_URL}\n*Git commit:*\n${GIT_COMMIT}"')
                }
            }
        }   
        stage("rdb") {
            steps {
                withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
                    script {
                        def rdbjson2 = sh(script: "/usr/local/bin/aws rds describe-db-instances \
                            --region eu-central-1 \
                            --db-instance-identifier mysqlinstance \
                            --query 'DBInstances[*].[DBInstanceIdentifier,Endpoint]'", returnStdout: true)
                        def jsonObj2 = readJSON text: rdbjson2
                        rdburl = sh(script: "echo ${jsonObj2[0][1].Address}", returnStdout: true).trim()
                        rdbport = sh(script: "echo ${jsonObj2[0][1].Port}", returnStdout: true).trim()
                        sh "echo rdb Address = ${rdburl}"
                        sh "echo rdb Port = ${rdbport}"
                    }
                }
            }
        }
        // stage("docker build api and push to ecr") {
		// 	steps {
        //         script {
        //             sh 'docker image prune -a -f'
        //             sh "cp ./jenkins/Dockerfile.api ./Dockerfile"
        //             TAG = sh (
        //                 script: 'git log -1 --pretty=%h',
        //                 returnStdout: true
        //             ).trim()
        //             docker.withRegistry(
        //                 'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
        //                 'ecr:eu-central-1:aws_creds') {
        //                     def myImage = docker.build('what-backend-release-ecr')
        //                 myImage.push(TAG)
        //             }
        //         }
        //     }
        // }

//
        // stage("docker build panel and push to ecr") {
		// 	steps {
        //         script {
        //             sh "ls"
        //             sh 'docker image prune -a -f'
        //             sh "cp ./jenkins/Dockerfile.panel ./Dockerfile"
        //             sh "cp ./jenkins/entrypoint.sh ./entrypoint.sh"

        //             TAG = sh (
        //                 script: 'git log -1 --pretty=%h',
        //                 returnStdout: true
        //             ).trim()
        //             docker.withRegistry(
        //                 'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
        //                 'ecr:eu-central-1:aws_creds') {
        //                     def myImage = docker.build('what-backend-release-panel-ecr')
        //                 myImage.push(TAG)
        //             }
        //         }
        //     }
        // }
//
        // stage('Deploy api in ECS') {
        //     steps {
        //         withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
        //             script {
        //                 def containerTag = sh(script: "/usr/local/bin/aws ecr describe-images --repository-name 'what-backend-release-ecr' --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text", returnStdout: true).trim()
        //                 // def containerTag = containerTag.trim()
        //                 sh "echo rdb Address"
        //                 sh "echo rdb Address = ${rdburl}"
        //                 sh "echo rdb Port"
        //                 sh "echo rdb Port = ${rdbport}"
        //                 sh "echo cont"
        //                 sh "sed -i 's/containerTag/${containerTag}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
        //                 sh "sed -i 's/rdburl/${rdburl}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
        //                 sh "sed -i 's/rdbport/${rdbport}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
        //                 sh "sed -i 's/DATABASE/${DATABASE}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
        //                 sh "sed -i 's/DB_PASSWORD/${DB_PASSWORD}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
        //                 sh "sed -i 's/DB_USERNAME/${DB_USERNAME}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        
                        
        //                 sh '''
        //                     /usr/local/bin/aws ecs register-task-definition \
        //                         --region ${AWS_ECR_REGION} \
        //                         --family ${AWS_ECS_TASK_DEFINITION} \
        //                         --execution-role-arn ${AWS_ECS_EXECUTION_ROL} \
        //                         --requires-compatibilities ${AWS_ECS_COMPATIBILITY} \
        //                         --network-mode ${AWS_ECS_NETWORK_MODE} \
        //                         --cpu ${AWS_ECS_CPU} \
        //                         --memory ${AWS_ECS_MEMORY} \
        //                         --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH} 
        //                 '''
        //                 def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
        //                 sh("/usr/local/bin/aws ecs update-service \
        //                     --cluster ${AWS_ECS_CLUSTER} \
        //                     --service ${AWS_ECS_SERVICE} \
        //                     --task-definition ${AWS_ECS_TASK_DEFINITION}")
        //                 // :${taskRevision}
        //             }
        //         }
        //     }
        // }
//
        stage('Deploy panel in ECS') {
            steps {
                withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
                    script {
                        def containerTag = sh(script: "/usr/local/bin/aws ecr describe-images --repository-name 'what-backend-release-panel-ecr' --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text", returnStdout: true).trim()
                        // def containerTag = containerTag.trim()
                        sh "sed -i 's/containerTag/${containerTag}/' ${AWS_ECS_PANEL_TASK_DEFINITION_PATH} "
                        sh "sed -i 's|url_api|${APIURL}|' ${AWS_ECS_PANEL_TASK_DEFINITION_PATH} "
                        sh '''
                            /usr/local/bin/aws ecs register-task-definition \
                                --region ${AWS_ECR_REGION} \
                                --family ${AWS_ECS_PANEL_TASK_DEFINITION} \
                                --execution-role-arn ${AWS_ECS_EXECUTION_ROL} \
                                --requires-compatibilities ${AWS_ECS_COMPATIBILITY} \
                                --network-mode ${AWS_ECS_NETWORK_MODE} \
                                --cpu ${AWS_ECS_CPU} \
                                --memory ${AWS_ECS_MEMORY} \
                                --container-definitions file://${AWS_ECS_PANEL_TASK_DEFINITION_PATH} 
                        '''
                        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
                        sh("/usr/local/bin/aws ecs update-service \
                            --cluster ${AWS_ECS_CLUSTER} \
                            --service ${AWS_ECS_PANEL_SERVICE} \
                            --task-definition ${AWS_ECS_PANEL_TASK_DEFINITION}")
                        // :${taskRevision}
                    }
                }
            }
        }
//
    }
}
//                             --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}
// def taskRevision2 = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\"" )
//#sed 's/containerTag/${containerTag}' ${AWS_ECS_TASK_DEFINITION_PATH} 