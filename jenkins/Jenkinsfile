pipeline {
	agent any 
// { label 'nodejs'}
	stages {
		stage("ls") {
			steps {
                sh "ls"
                sh "cp ./jenkins/Dockerfile.api ./Dockerfile" 
            }
        }
		stage("create .env") {
			steps {
                sh "echo 'ConnectionStrings__DefaultConnection=server=192.168.1.128;port=3306;UserId=root;Password=vfhubnbx94AB;database=soft;Allow User Variables=true' > ./CharlieBackend.Api/.env"
                sh "echo 'ConnectionStrings__DefaultConnection=server=192.168.1.128;port=3306;UserId=root;Password=vfhubnbx94AB;database=soft;Allow User Variables=true' >> ./CharlieBackend.Api/.env"
                sh "echo 'ConnectionStrings__RabbitMQ=host=kangaroo.rmq.cloudamqp.com;virtualHost=cfhrvrrt;username=cfhrvrrt;password=yYvcHUcFxTsHGm51j4GtpA3mFguNv065 ' >> ./CharlieBackend.Api/.env"
                sh "echo 'ConnectionStrings__AzureBlobsAccessKey=DefaultEndpointsProtocol=https;AccountName=csb10032000fbf86473;AccountKey=3Naz0PXXBe0Lie7HV51jdZsSFCqThDMsqGWdENueI/d2OoV14j6o9Hh0lY1TvAtM8g0VIuPQLDDmEruu951NZA==;EndpointSuffix=core.windows.net' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Url=https://963c-188-163-45-170.ngrok.io' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Key=1945675656:AAF5rVHswcwa8-xIZLS4DUlgFL2RW8mhrGM' >> ./CharlieBackend.Api/.env"
                sh "echo 'BotSettings__Name=whatnotification_bot' >> ./CharlieBackend.Api/.env"
                sh "echo 'AuthOptions__KEY=mysupersecret_secretkey!123' >> ./CharlieBackend.Api/.env"
                sh "echo 'CredentialsSendersSettings__email=WhatITAcademy@gmail.com' >> ./CharlieBackend.Api/.env"
                sh "echo 'CredentialsSendersSettings__password=sseta2551fgya1235' >> ./CharlieBackend.Api/.env"
            }
        }
        stage("docker build and push to ecr") {
			steps {
                script {
                    docker image prune -f
                    docker.withRegistry(
                        'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
                        'ecr:eu-central-1:aws_creds') {
                            def myImage = docker.build('what-backend-release-ecr')
                        myImage.push('tag_001')
                    }
                }
            }
        }
        stage('Test') {
            agent {
                ecs {
                    cloud 'aws_vpc'
                    // 'label-of-my-preconfigured-template':
                    inheritFrom 'aws_ecs_task'
                    cpu 256
                    memory 128
                    image '934086672967.dkr.ecr.eu-central-1.amazonaws.com/what-backend-release-ecr:tag_001'
                    // image '$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/jenkins/java8:2019.7.29-1'
                    // logDriver 'fluentd'
                    // logDriverOptions([[name: 'foo', value:'bar'], [name: 'bar', value: 'foo']])
                    portMappings([[containerPort: 80, hostPort: 80, protocol: 'tcp'], [containerPort: 5000, hostPort: 5000, protocol: 'tcp'], [containerPort: 5001, hostPort: 5001, protocol: 'tcp']])
                }
            }
            steps {
                sh 'echo hello'
            }
        }
    }
}
